<?php

/**
 * This is the model base class for the table "page".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Page".
 *
 * Columns in table "page" available as properties of the model,
 * followed by relations of table "page" available as properties of the model.
 *
 * @property integer $id
 * @property integer $author
 * @property string $title
 * @property string $content
 * @property string $excerpt
 * @property string $status
 * @property string $created_at
 * @property string $modified_at
 * @property integer $parent
 * @property integer $order
 * @property string $type
 * @property string $comment_status
 * @property string $permission
 * @property string $password
 *
 * @property User $author0
 * @property Page $parent0
 * @property Page[] $pages
 */
abstract class BasePage extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'page';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Page|Pages', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('author, title, content, excerpt, created_at, modified_at, parent, password', 'required'),
			array('author, parent, order', 'numerical', 'integerOnly'=>true),
			array('status, type, comment_status, permission, password', 'length', 'max'=>20),
			array('status, order, type, comment_status, permission', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, author, title, content, excerpt, status, created_at, modified_at, parent, order, type, comment_status, permission, password', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'author0' => array(self::BELONGS_TO, 'User', 'author'),
			'parent0' => array(self::BELONGS_TO, 'Page', 'parent'),
			'pages' => array(self::HAS_MANY, 'Page', 'parent'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'author' => null,
			'title' => Yii::t('app', 'Title'),
			'content' => Yii::t('app', 'Content'),
			'excerpt' => Yii::t('app', 'Excerpt'),
			'status' => Yii::t('app', 'Status'),
			'created_at' => Yii::t('app', 'Created At'),
			'modified_at' => Yii::t('app', 'Modified At'),
			'parent' => null,
			'order' => Yii::t('app', 'Order'),
			'type' => Yii::t('app', 'Type'),
			'comment_status' => Yii::t('app', 'Comment Status'),
			'permission' => Yii::t('app', 'Permission'),
			'password' => Yii::t('app', 'Password'),
			'author0' => null,
			'parent0' => null,
			'pages' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('author', $this->author);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('excerpt', $this->excerpt, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('modified_at', $this->modified_at, true);
		$criteria->compare('parent', $this->parent);
		$criteria->compare('order', $this->order);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('comment_status', $this->comment_status, true);
		$criteria->compare('permission', $this->permission, true);
		$criteria->compare('password', $this->password, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}